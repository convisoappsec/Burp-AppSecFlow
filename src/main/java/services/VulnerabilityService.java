package services;

import burp.IBurpExtenderCallbacks;
import burp.IExtensionHelpers;
import burp.IResponseInfo;
import com.google.gson.Gson;
import http.HttpClient;
import models.vulnerability.Vulnerability;
import utilities.Util;
import view.new_vulnerability.NewVulnerabilityTab;

import javax.swing.*;
import java.io.FileNotFoundException;

public class VulnerabilityService {

    private final IBurpExtenderCallbacks callbacks;
    private final IExtensionHelpers helpers;
    private final Util util;
    private final NewVulnerabilityTab newVulnerabilityTab;
    private static final String FLOW_PROJECT_ID = "FLOW.PROJECT.ID";

    public VulnerabilityService(final IBurpExtenderCallbacks callbacks, final IExtensionHelpers helpers, NewVulnerabilityTab parentCaller) {
        this.callbacks = callbacks;
        this.helpers = helpers;
        this.newVulnerabilityTab = parentCaller;
        this.util = new Util(this.callbacks, this.helpers);
    }

    public void submitVulnerabilityForm(Vulnerability vulnerability){
        String projectId = callbacks.loadExtensionSetting(FLOW_PROJECT_ID);
        if(projectId == null || projectId.isEmpty()){
            JOptionPane.showMessageDialog(this.newVulnerabilityTab.getRootPanel2(), "Project ID not defined!");
        }else{
            vulnerability.setProject_id(Integer.parseInt(projectId));
            new Thread(() -> this.postVulnerabilityMultipart(vulnerability)).start();
        }

    }

    public void postVulnerability(Vulnerability vulnerability){
        HttpClient httpClient = new HttpClient(this.callbacks, this.helpers);
        String httpResult = httpClient.post("v2/vulnerabilities", new Gson().toJson(vulnerability));
        IResponseInfo response = this.helpers.analyzeResponse(httpResult.getBytes());
        int statusCode = response.getStatusCode();
        if(statusCode == 201){
            JOptionPane.showMessageDialog(this.newVulnerabilityTab.getRootPanel2(), "Created!");
        }else if(statusCode == 401){
            JOptionPane.showMessageDialog(this.newVulnerabilityTab.getRootPanel2(), "Unauthorized!");
        }else{
            JOptionPane.showMessageDialog(this.newVulnerabilityTab.getRootPanel2(), "Something went wrong! Try again later!");
        }
    }

    public void postVulnerabilityMultipart(Vulnerability vulnerability){

        if(!this.newVulnerabilityTab.getBtnSubmitForm().isEnabled()){
            return;
        }
        this.newVulnerabilityTab.getBtnSubmitForm().setEnabled(false);
        HttpClient httpClient = new HttpClient(this.callbacks, this.helpers);
        try {
            IResponseInfo response = httpClient.postMultiForm("v2/vulnerabilities", vulnerability.toMultipart());
            int statusCode = response.getStatusCode();
            if(statusCode == 201){
                JOptionPane.showMessageDialog(this.newVulnerabilityTab.getRootPanel2(), "Created!");
                this.newVulnerabilityTab.clearForm();
            }else if(statusCode == 401){
                JOptionPane.showMessageDialog(this.newVulnerabilityTab.getRootPanel2(), "Unauthorized!");
            }else{
                JOptionPane.showMessageDialog(this.newVulnerabilityTab.getRootPanel2(), "Something went wrong! Try again later!");
            }
        } catch (FileNotFoundException e) {
            util.sendStderr("Not possible to access archive.");
        }

        this.newVulnerabilityTab.getBtnSubmitForm().setEnabled(true);

    }

}
