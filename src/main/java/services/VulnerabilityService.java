package services;

import burp.IBurpExtenderCallbacks;
import burp.IExtensionHelpers;
import burp.IResponseInfo;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import http.HttpClient;
import models.services_manager.ServicesManager;
import models.vulnerability.Evidence;
import models.vulnerability.Vulnerability;
import models.vulnerability.graphql.CreateWebVulnerabilityQL;
import org.apache.http.HttpEntity;
import org.apache.http.auth.AuthenticationException;
import org.apache.http.client.HttpResponseException;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import view.issues_tab.NewIssueTab;

import javax.swing.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.*;

public class VulnerabilityService extends Service {

    public VulnerabilityService(IBurpExtenderCallbacks callbacks, IExtensionHelpers helpers, ServicesManager servicesManager) {
        super(callbacks, helpers, servicesManager);
    }

    public void postVulnerability(Vulnerability vulnerability, NewIssueTab newIssueTab) throws FileNotFoundException, AuthenticationException, HttpResponseException {

        if (!newIssueTab.getBtnSubmitForm().isEnabled()) {
            return;
        }

        ArrayList<Evidence> evidencesList = vulnerability.getVulnerabilityArchives();
        Gson gson = new Gson();
        JsonObject queryJsonObject = gson.fromJson(gson.toJson(vulnerability), JsonObject.class);
        queryJsonObject.addProperty("vulnerabilityArchives", "$vulnerabilityArchives");
        queryJsonObject.remove("notification");
        CreateWebVulnerabilityQL createWebVulnerabilityQL = new CreateWebVulnerabilityQL();
        createWebVulnerabilityQL.setQuery(queryJsonObject.toString());
        createWebVulnerabilityQL.setVariables(new HashMap<String, String>() {{
            put("vulnerabilityArchives", "[null]");
        }});

        String operationsObject = gson.toJson(createWebVulnerabilityQL);
        System.out.println(operationsObject);

        MultipartEntityBuilder builder = MultipartEntityBuilder.create();
        builder.addTextBody("operations", operationsObject);


        HashMap<String, ArrayList<String>> mapArchives = new HashMap<>();
        for (int i = 0; i < evidencesList.size(); i++) {
            ArrayList<String> neededEncapsulation = new ArrayList<>();
            neededEncapsulation.add("variables.vulnerabilityArchives." + i);
            mapArchives.put(String.valueOf(i), neededEncapsulation);
        }
        builder.addTextBody("map", gson.toJson(mapArchives));


        for (int i = 0; i < evidencesList.size(); i++) {
            Evidence e = evidencesList.get(i);
            File file = new File(e.getPath());
            builder.addBinaryBody(String.valueOf(i), new FileInputStream(file), ContentType.APPLICATION_OCTET_STREAM, this.util.removeSpecialCharacters(e.getName()));
        }

        GraphQLService graphQLService = this.servicesManager.getGraphQLService();

        graphQLService.executeQueryMultipart(builder.build());

    }
}
