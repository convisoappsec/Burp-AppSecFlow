package services;

import burp.IBurpExtenderCallbacks;
import burp.IExtensionHelpers;
import burp.IResponseInfo;
import http.HttpClient;
import models.services_manager.ServicesManager;
import models.vulnerability.Vulnerability;
import view.new_vulnerability.NewIssueTab;

import javax.swing.*;
import java.io.FileNotFoundException;

public class VulnerabilityService extends FathersService{

    private NewIssueTab newIssueTab;
    private static final String FLOW_PROJECT_ID = "FLOW.PROJECT.ID";

    public VulnerabilityService(IBurpExtenderCallbacks callbacks, IExtensionHelpers helpers, ServicesManager servicesManager) {
        super(callbacks, helpers, servicesManager);
    }

    public void submitVulnerabilityForm(Vulnerability vulnerability){
        String projectId = callbacks.loadExtensionSetting(FLOW_PROJECT_ID);
        if(projectId == null || projectId.isEmpty()){
            JOptionPane.showMessageDialog(this.newIssueTab.getRootPanel2(), "Project ID not defined!"); // Verificar a posibilidade de selecionar a config tab juntamente com  otrigamento do erro
        }else{
            vulnerability.setProject_id(Integer.parseInt(projectId));
            new Thread(() -> this.postVulnerabilityMultipart(vulnerability)).start();
        }

    }

    public void postVulnerabilityMultipart(Vulnerability vulnerability){

        if(!this.newIssueTab.getBtnSubmitForm().isEnabled()){
            return;
        }
        this.newIssueTab.getBtnSubmitForm().setEnabled(false);
        HttpClient httpClient = new HttpClient(this.callbacks, this.helpers);
        try {
            IResponseInfo response = httpClient.postMultiForm("v2/vulnerabilities", vulnerability.toMultipart());
            if(response != null){
                int statusCode = response.getStatusCode();
                if(statusCode == 201){
                    JOptionPane.showMessageDialog(this.newIssueTab.getRootPanel2(), "Created!");
                    this.newIssueTab.clearForm();
                }else if(statusCode == 401){
                    JOptionPane.showMessageDialog(this.newIssueTab.getRootPanel2(), "Unauthorized!");
                }else{
                    JOptionPane.showMessageDialog(this.newIssueTab.getRootPanel2(), "Something went wrong! Try again later!");
                }
            }else{
                JOptionPane.showMessageDialog(this.newIssueTab.getRootPanel2(), "Something went wrong! Try again later!\n Connection not established.");
            }

        } catch (FileNotFoundException e) {
            util.sendStderr("Not possible to access archive.");
        }

        this.newIssueTab.getBtnSubmitForm().setEnabled(true);

    }

    public void setNewVulnerabilityTab(NewIssueTab newIssueTab) {
        this.newIssueTab = newIssueTab;
    }
}
