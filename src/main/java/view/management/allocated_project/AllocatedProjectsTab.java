package view.management.allocated_project;

import burp.IBurpExtenderCallbacks;
import burp.IExtensionHelpers;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import models.project.Project;
import models.services_manager.ServicesManager;
import models.tabs_manager.TabsManager;
import services.ProjectService;
import view.FathersComponentTab;
import view.management.allocated_project.cell_renderer.WorkingProjectCellRenderer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Locale;

public class AllocatedProjectsTab extends FathersComponentTab {
    private JPanel rootPanel;
    private JTable tblAllocatedProjects;
    private JButton defineButton;
    private JButton btnLoadProjects;
    private JLabel lblAllocatedProjects;
    private ProjectService projectService;
    private WorkingProjectCellRenderer workingProjectCellRenderer;
    private DefaultTableModel tblAllocatedProjectsModel;


    public AllocatedProjectsTab(final IBurpExtenderCallbacks callbacks, final IExtensionHelpers helpers, ServicesManager servicesManager, final TabsManager tabsManager) {
        super(callbacks, helpers, servicesManager, tabsManager);
    }

    public void initializeComponent() {
        $$$setupUI$$$();
        this.projectService = this.servicesManager.getProjectService();
        this.initiateAllocatedTableColumns();

        super.addLblBoldListener(lblAllocatedProjects);

        workingProjectCellRenderer.addPropertyChangeListener(evt -> {
            if (evt.getPropertyName().equals("foreground")) {
                workingProjectCellRenderer.setDefaultForegroundColor(workingProjectCellRenderer.getForeground());

                if (btnLoadProjects.isEnabled()) {
                    btnLoadProjects.doClick();
                }
            }
        });


        btnLoadProjects.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {


                new Thread(() -> {
                    if (!btnLoadProjects.isEnabled()) {
                        return;
                    }
                    btnLoadProjects.setEnabled(false);
                    tblAllocatedProjectsModel.setRowCount(0);
                    for (Project p :
                            projectService.getAllocatedProjects()) {
                        tblAllocatedProjectsModel.addRow(new Object[]{p.getId(), p.getLabel(), p.getPrettyDueDate()});
                    }
                    btnLoadProjects.setText("Reload");
                    btnLoadProjects.setEnabled(true);
                    updatePlaybooksTable();
                }).start();
            }
        });

        defineButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                projectService.setWorkingProject((int) tblAllocatedProjects.getValueAt(tblAllocatedProjects.getSelectedRow(), 0));

                new Thread(() -> {
                    tblAllocatedProjects.revalidate();
                    tblAllocatedProjects.repaint();
                }).start();

                updatePlaybooksTable();
            }
        });

        SwingUtilities.invokeLater(() -> {
                    this.projectService.getReadyForView();
                    this.updatePlaybooksTable();
                }
        );
    }

    private void updatePlaybooksTable() {
        new Thread(() -> tabsManager.getPlaybookTab().updatePlaybooksTables()).start();
    }

    private void initiateAllocatedTableColumns() {
        Object[] columnsHeaders = {"ID", "Title", "End date"};

        this.tblAllocatedProjectsModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        this.tblAllocatedProjectsModel.setColumnIdentifiers(columnsHeaders);
        this.tblAllocatedProjects.setModel(this.tblAllocatedProjectsModel);

        this.workingProjectCellRenderer = new WorkingProjectCellRenderer(this.projectService);
        for (int i = 0; i < tblAllocatedProjects.getColumnCount(); i++) {
            this.tblAllocatedProjects.getColumnModel().getColumn(i).setCellRenderer(workingProjectCellRenderer);
        }
        this.workingProjectCellRenderer.setDefaultForegroundColor(rootPanel.getForeground());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new FormLayout("fill:d:grow", "center:d:noGrow,top:4dlu:noGrow,center:d:grow"));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:37px:noGrow,left:4dlu:noGrow,fill:481px:grow,left:83dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:90px:noGrow,top:4dlu:noGrow,center:27px:noGrow,top:4dlu:noGrow,fill:194px:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        CellConstraints cc = new CellConstraints();
        rootPanel.add(panel1, cc.xywh(1, 1, 1, 3));
        lblAllocatedProjects = new JLabel();
        Font lblAllocatedProjectsFont = this.$$$getFont$$$(null, Font.BOLD, -1, lblAllocatedProjects.getFont());
        if (lblAllocatedProjectsFont != null) lblAllocatedProjects.setFont(lblAllocatedProjectsFont);
        lblAllocatedProjects.setText("Allocated projects");
        panel1.add(lblAllocatedProjects, cc.xy(3, 3, CellConstraints.CENTER, CellConstraints.DEFAULT));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, cc.xy(3, 5, CellConstraints.FILL, CellConstraints.FILL));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(null, "", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        tblAllocatedProjects = new JTable();
        tblAllocatedProjects.setAutoCreateRowSorter(true);
        tblAllocatedProjects.setAutoResizeMode(4);
        scrollPane1.setViewportView(tblAllocatedProjects);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:noGrow", "center:d:grow,top:4dlu:noGrow,center:max(d;4px):grow"));
        panel1.add(panel2, cc.xy(4, 5));
        defineButton = new JButton();
        defineButton.setText("Define");
        panel2.add(defineButton, cc.xy(3, 1, CellConstraints.DEFAULT, CellConstraints.BOTTOM));
        btnLoadProjects = new JButton();
        btnLoadProjects.setText("Load");
        panel2.add(btnLoadProjects, cc.xy(3, 3, CellConstraints.DEFAULT, CellConstraints.TOP));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FormLayout("fill:d:grow", "center:d:grow"));
        panel1.add(panel3, cc.xy(3, 7));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
