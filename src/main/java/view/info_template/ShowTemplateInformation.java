package view.info_template;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import models.vulnerability.Category;
import models.vulnerability.Pattern;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Arrays;
import java.util.Locale;
import java.util.StringJoiner;

public class ShowTemplateInformation {
    private JTextField txtFieldTitle;
    private JTextField txtFieldCategories;
    private JTextField txtFieldPatterns;
    private JEditorPane txtAreaVulnerability;
    private JEditorPane txtAreaReference;
    private JLabel lblTitle;
    private JLabel lblCategories;
    private JLabel lblPatterns;
    private JPanel rootPanel;


    public void setTitle(String title) {
        this.txtFieldTitle.setText(title);
    }

    public void setCategories(Category[] categories) {
        if (categories.length > 0) {
            StringBuilder categoriesString = new StringBuilder();
            for (Category c :
                    categories) {
                categoriesString.append(c.getName()).append(", ");
            }
            this.txtFieldCategories.setText(categoriesString.toString().substring(0, categoriesString.lastIndexOf(",")));
        }
    }

    public void setTxtFieldPatterns(Pattern[] patterns) {
        if (patterns.length > 0) {
            StringBuilder patternsString = new StringBuilder();
            for (Pattern c :
                    patterns) {
                patternsString.append(c.getName()).append(", ");
            }
            this.txtFieldPatterns.setText(patternsString.substring(0, patternsString.lastIndexOf(",")));
        }


    }

    public void setVulnerabilityText(String text) {
        this.txtAreaVulnerability.setText(text);
        this.txtAreaVulnerability.setCaretPosition(0);
    }

    public void setVulnerabilityReferences(String references) {
        this.txtAreaReference.setText(references);
        this.txtAreaReference.setCaretPosition(0);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new FormLayout("fill:485px:grow", "center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow"));
        lblTitle = new JLabel();
        Font lblTitleFont = this.$$$getFont$$$(null, Font.BOLD, -1, lblTitle.getFont());
        if (lblTitleFont != null) lblTitle.setFont(lblTitleFont);
        lblTitle.setText("Title");
        CellConstraints cc = new CellConstraints();
        rootPanel.add(lblTitle, cc.xy(1, 1));
        txtFieldTitle = new JTextField();
        txtFieldTitle.setEnabled(false);
        rootPanel.add(txtFieldTitle, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        lblCategories = new JLabel();
        Font lblCategoriesFont = this.$$$getFont$$$(null, Font.BOLD, -1, lblCategories.getFont());
        if (lblCategoriesFont != null) lblCategories.setFont(lblCategoriesFont);
        lblCategories.setText("Categories");
        rootPanel.add(lblCategories, cc.xy(1, 5));
        txtFieldCategories = new JTextField();
        txtFieldCategories.setEnabled(false);
        rootPanel.add(txtFieldCategories, cc.xy(1, 7, CellConstraints.FILL, CellConstraints.DEFAULT));
        lblPatterns = new JLabel();
        Font lblPatternsFont = this.$$$getFont$$$(null, Font.BOLD, -1, lblPatterns.getFont());
        if (lblPatternsFont != null) lblPatterns.setFont(lblPatternsFont);
        lblPatterns.setText("Patterns");
        rootPanel.add(lblPatterns, cc.xy(1, 9));
        txtFieldPatterns = new JTextField();
        txtFieldPatterns.setEnabled(false);
        rootPanel.add(txtFieldPatterns, cc.xy(1, 11, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Vulnerability");
        rootPanel.add(label1, cc.xy(1, 13));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, Font.BOLD, -1, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("Reference");
        rootPanel.add(label2, cc.xy(1, 17));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, cc.xy(1, 19, CellConstraints.FILL, CellConstraints.FILL));
        txtAreaReference = new JEditorPane();
        txtAreaReference.setContentType("text/html");
        scrollPane1.setViewportView(txtAreaReference);
        final JScrollPane scrollPane2 = new JScrollPane();
        rootPanel.add(scrollPane2, cc.xy(1, 15, CellConstraints.FILL, CellConstraints.FILL));
        txtAreaVulnerability = new JEditorPane();
        txtAreaVulnerability.setContentType("text/html");
        scrollPane2.setViewportView(txtAreaVulnerability);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */


}
